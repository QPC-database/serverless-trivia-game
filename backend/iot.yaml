AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Live Scoreboard using IoT

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  PlayerInventoryTable:
    Type: String
  GamesDetailTable:
    Type: String
  ActiveGamesTable:
    Type: String
  HighScoreTable:
    Type: String
  PlayerProgressTopicName:
    Type: String
    Description: Topic Name for sending player progress
  PlayerProgressTopicArn:
    Type: String
    Description: Topic Arn for sending player progress
  EMFNamespace:
    Type: String
  LogRetentionDays:
    Type: Number
    Description: Number of days to retain CloudWatch Logs for
  IoTEndpoint:
    Type: String
    Description: The IoT endpoint for data
  QuizSourceStreamName:
    Type: String
    Description: Stream for results
  
Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    MemorySize: 256 
    Timeout: 10
    Tracing: Active
    Environment:
      Variables:
        AWS_EMF_NAMESPACE: !Sub "${EMFNamespace}"
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:12"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.0.82/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ1)

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ2)

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t2.small
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt RedisClusterSecurityGroup.GroupId

  RedisClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lock down Redis to VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnets for Redis
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SendQuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/question_send/
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - !Ref SendQuestionPolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/nextquestion'

  SendQuestionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref SendQuestionFunction]]

  SendQuestionPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTSendQuestionPolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: "Allow"
              Action: "iot:Publish"
              Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/question"]]

  CacheGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_cache/
      MemorySize: 1536
      Environment:
        Variables:
          ACTIVE_GAMES_TABLE_NAME: !Sub "${ActiveGamesTable}"
          GAMES_DETAIL_TABLE_NAME: !Sub "${GamesDetailTable}"
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${ActiveGamesTable}"
        - DynamoDBReadPolicy:
            TableName: !Sub "${GamesDetailTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref CacheGamePolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'hostgame'

  CacheGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref CacheGameFunction]]
  
  CacheGamePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTCacheGamePolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/questionlist"]]

  JoinGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_join/
      MemorySize: 1024
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref JoinGamePolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/join/+'

  JoinGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref JoinGameFunction]]

  JoinGamePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTJoinGamePolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/joined/*"]]

  ReceiveAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/answer_receive/
      MemorySize: 512
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          RESPONSE_STREAM: !Sub "${QuizSourceStreamName}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - KinesisCrudPolicy:
            StreamName: !Sub "${QuizSourceStreamName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref ReceiveAnswerIoTPolicy
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/answers/+'

  ReceiveAnswerIoTPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTReceiveAnswerPolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/scoreboard"]]
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/playercorrect"]]
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/results/*"]]

  ReceiveAnswerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ReceiveAnswerFunction]]

  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_start/
      MemorySize: 512
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref StartGameIoTPolicy
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/startgame'

  StartGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref StartGameFunction]]

  StartGameIoTPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTStartGamePolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/scoreboard"]]

  EndGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_end/
      MemorySize: 1536
      Timeout: 20
      Environment:
        Variables:
          ACTIVE_GAMES_TABLE_NAME: !Sub "${ActiveGamesTable}"
          LEADER_BOARD_TABLE_NAME: !Sub "${HighScoreTable}"
          PLAYER_PROGRESS_TOPIC: !Sub "${PlayerProgressTopicArn}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${ActiveGamesTable}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${HighScoreTable}"
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${PlayerProgressTopicName}" 
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/endthegame'

  EndGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref EndGameFunction]]

